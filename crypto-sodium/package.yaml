# SPDX-FileCopyrightText: 2020 Serokell <https://serokell.io/>
#
# SPDX-License-Identifier: MPL-2.0

name: crypto-sodium
version: 0.0.2.0
synopsis: Easy-and-safe-to-use high-level cryptography based on Sodium
description: |
  This is a collection of high-level cryptographic primitives based on
  <https://libsodium.io/ Sodium>, spiced up with extra type-safety
  of the Haskell type system.

  __Note: this package is experimental and WIP.__

  = Why

  Cryptography is hard to do right and you should never try to implement it
  on your own, even if you have access to safe and secure cryptographic
  primitives. Luckily, D. J. Bernstein created <https://nacl.cr.yp.to/ NaCl>.

  NaCl was designed specifically to make it hard to use it incorrectly and
  thus save you from a disaster. It exposes high-level cryptographic
  algorithms with underlying implementations chosen for you, so you do not
  get flexibility, but you get security, which is more important.

  = What

  <https://libsodium.org Sodium> is a reimplementation of NaCl
  with the goal to make it more portable across different platforms.
  With time, it started providing more than the same interface as NaCl.
  Nowadays it implements additional primitives and utility functions.

  = How

  == Secret-key cryptography

  * Authenticated encryption: "Crypto.Secretbox"
  * Encryption: "Crypto.Stream"
  * Authentication: "Crypto.Auth"


  = Thread-safety #threadSafety#

  Some of the Sodium (and NaCl) functions (those that generate random data)
  are not thread-safe. All these functions are explicitly marked as such
  in their Haddock documentation.

  Calling 'sodiumInit' before they are used makes them thread-safe, see
  "Crypto.Init".

  = Performance

  Sodium contains multiple implementations of the primitives it provides.
  There are generic implementations, that are used by default, and
  multiple alternatives optimised for various platforms.

  'sodiumInit' will quickly benchmark all available implementations and choose
  the bests ones for each primitive, see "Crypto.Init".

category: Cryptography

author: Kirill Elagin <kirelagin@serokell.io>
copyright: 2020 Serokell
license-file: LICENSES/MPL-2.0.txt

github: serokell/haskell-crypto

extra-doc-files:
  - CHANGELOG.md
  - README.md

ghc-options:
  - -Wall
  - -Wcompat
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints

default-extensions:
  - DataKinds
  - FlexibleContexts
  - FlexibleInstances
  - GeneralizedNewtypeDeriving
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - NamedFieldPuns
  - NumericUnderscores
  - OverloadedStrings
  - PolyKinds
  - ScopedTypeVariables

dependencies:
  - base >= 4.10 && < 4.15
  - bytestring >= 0.9 && < 0.11

library:
  source-dirs: lib

  dependencies:
    - gdp >= 0.0.0.1 && < 0.1
    - libsodium >= 1.0.11 && < 2
    - memory >= 0.1 && < 0.16
    - NaCl >= 0.0.1.0 && < 0.1
    - safe-exceptions >= 0.1 && < 0.2

  reexported-modules:
    - NaCl:Crypto.Secretbox

tests:
  test:
    source-dirs: test
    main: Test.hs

    dependencies:
      - crypto-sodium

      - HUnit
      - tasty
      - tasty-hunit

      - libsodium
      - memory

    build-tools:
      - tasty-discover:tasty-discover
