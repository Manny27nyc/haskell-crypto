{-# OPTIONS_GHC -Wno-redundant-constraints #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}

-- SPDX-FileCopyrightText: 2020 Serokell
--
-- SPDX-License-Identifier: MPL-2.0

-- | This module gives different ways of obtaining nonces.
--
-- = Random nonce generation
--
-- The 'generate' function is great at generating new random nonces.
-- The nonces are produced using the standard @random@ package, so
-- the generation is very fast.
module Crypto.Nonce
  (
  -- * Random nonce generation
    generate
  ) where

import Data.ByteArray.Sized (SizedByteArray)
import Data.ByteString (ByteString)
import GHC.TypeLits (KnownNat)

import Crypto.Internal.Random (generateInsecure)


-- | Generate a new random nonce.
--
-- Note: random data generated by the functions in this module is only suitable
-- to be used as a nonce, but never as a secret key.
generate :: KnownNat n => IO (SizedByteArray n ByteString)
generate = generateInsecure
